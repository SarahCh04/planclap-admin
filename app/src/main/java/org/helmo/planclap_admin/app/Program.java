/*
 * This source file was generated by the Gradle 'init' task
 */
package org.helmo.planclap_admin.app;

import org.helmo.planclap_admin.presentations.*;
import org.helmo.planclap_admin.presentations.commands.*;
import org.helmo.planclap_admin.views.*;
import org.helmo.planclap_admin.infrastructures.JsonMovieRepository;

import java.io.*;

/**
 * La classe {@code Program} constitue le point d’entrée principal de l’application
 *
 * <p>Elle analyse les arguments de la ligne de commande, initialise les différentes
 * couches de l’architecture MVP (Model-View-Presenter), puis lance la boucle principale
 * du menu CLI.</p>
 *
 * <p>Le programme doit être exécuté avec l’argument obligatoire :
 * <pre>
 *     --dir=chemin/vers/le/dossier
 * </pre>
 * où le dossier spécifié contient (ou contiendra) le fichier {@code movies.json}
 * utilisé pour charger les films à planifier.</p>
 */
public class Program {

    /**
     * Point d’entrée principal du programme.
     *
     * @param args les arguments de la ligne de commande (ex. {@code --dir=c:/TEMP/data})
     */
    public static void main(String[] args) {

        // 1. Analyse des arguments de la ligne de commande
        // On cherche l’argument commençant par "--dir=" afin d’obtenir le chemin du dossier de travail.
        String dirPath = null;
        for (String arg : args) {
            if (arg.startsWith("--dir=")) {
                dirPath = arg.substring(6); // On extrait la partie après "--dir="
                break;
            }
        }

        // 2. Validation du dossier fourni
        // Si aucun argument ou un dossier invalide est passé, on affiche un message d’erreur et on arrête le programme.
        if (dirPath == null || !new File(dirPath).isDirectory()) {
            System.out.println("argument requis dir manquant ou incorrect");
            return;
        }

        // 3. Initialisation du pattern MVP
        // Création du répertoire de travail à partir du chemin fourni.
        File directory = new File(dirPath);
        // Le repository gère la lecture du fichier JSON contenant les films.
        JsonMovieRepository repository = new JsonMovieRepository(directory);

        // 4. Configuration des flux d'entrée/sortie
        BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));
        PrintStream cout = System.out;

        // 5. Initialisation des vues
        MovieListCLIView movieListView = new MovieListCLIView();
        AddMovieCLIView addMovieView = new AddMovieCLIView(cin, cout);
        ConsultMovieCLIView consultMovieCLIView = new ConsultMovieCLIView(cin, cout);

        // 6. Initialisation des présentateurs
        MoviePresenter moviePresenter = new MoviePresenter(repository, movieListView);
        AddMoviePresenter addMoviePresenter = new AddMoviePresenter(repository, addMovieView);
        ConsultMoviePresenter consultMoviePresenter = new ConsultMoviePresenter(repository, consultMovieCLIView);

        // 7. Configuration du menu CLI
        CommandMap menu = new CommandMap(cin, cout);
        menu.addItem("Lister les films à planifier", new ListMoviesCommand(moviePresenter));
        menu.addItem("Encoder un film", new AddMovieCommand(addMoviePresenter));
        menu.addItem("Consulter un film", new ConsultMovieCommand(consultMoviePresenter));
        // TODO: Ajouter les autres commandes pour les US suivantes

        // 8. Lancement du menu principal
        try {
            menu.execute();
        } catch (ApplicationQuitException e) {
            // L'utilisateur a choisi de quitter
        }

        System.out.println("Fermeture de l'application");
    }
}